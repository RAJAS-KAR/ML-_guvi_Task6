{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RAJAS-KAR/ML-_guvi_task/blob/main/Assignment8.ipynb%20car_price_prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SG67roOB1V9T"
      },
      "source": [
        "# Assignment8"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "collapsed": true,
        "id": "FSezAkRg1V9W"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import linear_model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "misKleHQ1V9X"
      },
      "source": [
        "# How Much is Your Car Worth?\n",
        "\n",
        "Data about the retail price of 2005 General Motors cars can be found in `car_data.csv`.\n",
        "\n",
        "The columns are:\n",
        "\n",
        "1. Price: suggested retail price of the used 2005 GM car in excellent condition.\n",
        "2. Mileage: number of miles the car has been driven\n",
        "3. Make: manufacturer of the car such as Saturn, Pontiac, and Chevrolet\n",
        "4. Model: specific models for each car manufacturer such as Ion, Vibe, Cavalier\n",
        "5. Trim (of car): specific type of car model such as SE Sedan 4D, Quad Coupe 2D          \n",
        "6. Type: body type such as sedan, coupe, etc.      \n",
        "7. Cylinder: number of cylinders in the engine        \n",
        "8. Liter: a more specific measure of engine size     \n",
        "9. Doors: number of doors           \n",
        "10. Cruise: indicator variable representing whether the car has cruise control (1 = cruise)\n",
        "11. Sound: indicator variable representing whether the car has upgraded speakers (1 = upgraded)\n",
        "12. Leather: indicator variable representing whether the car has leather seats (1 = leather)\n",
        "\n",
        "## Tasks, Part 1\n",
        "\n",
        "1. Find the linear regression equation for mileage vs price.\n",
        "2. Chart the original data and the equation on the chart.\n",
        "3. Find the equation's $R^2$ score (use the `.score` method) to determine whether the\n",
        "equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)\n",
        "\n",
        "## Tasks, Part 2\n",
        "\n",
        "1. Use mileage, cylinders, liters, doors, cruise, sound, and leather to find the linear regression equation.\n",
        "2. Find the equation's $R^2$ score (use the `.score` method) to determine whether the\n",
        "equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)\n",
        "3. Find the combination of the factors that is the best predictor for price.\n",
        "\n",
        "## Tasks, Hard Mode\n",
        "\n",
        "1. Research dummy variables in scikit-learn to see how to use the make, model, and body type.\n",
        "2. Find the best combination of factors to predict price."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Z9lVQ0kL1V9Y",
        "outputId": "4edb6714-74ba-4b9d-9914-dc5f1e66b806"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Price  Mileage   Make    Model      Trim   Type  Cylinder  Liter  \\\n",
              "0  17314.103129     8221  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "1  17542.036083     9135  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "2  16218.847862    13196  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "3  16336.913140    16342  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "4  16339.170324    19832  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "\n",
              "   Doors  Cruise  Sound  Leather  \n",
              "0      4       1      1        1  \n",
              "1      4       1      1        0  \n",
              "2      4       1      1        0  \n",
              "3      4       1      0        0  \n",
              "4      4       1      0        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7880bab-01b2-45a1-9deb-6149f2d0a55f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Trim</th>\n",
              "      <th>Type</th>\n",
              "      <th>Cylinder</th>\n",
              "      <th>Liter</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cruise</th>\n",
              "      <th>Sound</th>\n",
              "      <th>Leather</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17314.103129</td>\n",
              "      <td>8221</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17542.036083</td>\n",
              "      <td>9135</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16218.847862</td>\n",
              "      <td>13196</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16336.913140</td>\n",
              "      <td>16342</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16339.170324</td>\n",
              "      <td>19832</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7880bab-01b2-45a1-9deb-6149f2d0a55f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a7880bab-01b2-45a1-9deb-6149f2d0a55f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a7880bab-01b2-45a1-9deb-6149f2d0a55f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ],
      "source": [
        "df = pd.read_csv(\"car_data.csv\")\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MBQ15h_EL9_5",
        "outputId": "c0bb2f9c-c542-43f1-ed39-c2b92286b4c1"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price       0\n",
              "Mileage     0\n",
              "Make        0\n",
              "Model       0\n",
              "Trim        0\n",
              "Type        0\n",
              "Cylinder    0\n",
              "Liter       0\n",
              "Doors       0\n",
              "Cruise      0\n",
              "Sound       0\n",
              "Leather     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop_duplicates()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "HMmpCA2HOnqf",
        "outputId": "b37204dc-ac1b-4f09-c9cf-22755c0617c2"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Price  Mileage    Make     Model           Trim   Type  Cylinder  \\\n",
              "0    17314.103129     8221   Buick   Century       Sedan 4D  Sedan         6   \n",
              "1    17542.036083     9135   Buick   Century       Sedan 4D  Sedan         6   \n",
              "2    16218.847862    13196   Buick   Century       Sedan 4D  Sedan         6   \n",
              "3    16336.913140    16342   Buick   Century       Sedan 4D  Sedan         6   \n",
              "4    16339.170324    19832   Buick   Century       Sedan 4D  Sedan         6   \n",
              "..            ...      ...     ...       ...            ...    ...       ...   \n",
              "799  16507.070267    16229  Saturn  L Series  L300 Sedan 4D  Sedan         6   \n",
              "800  16175.957604    19095  Saturn  L Series  L300 Sedan 4D  Sedan         6   \n",
              "801  15731.132897    20484  Saturn  L Series  L300 Sedan 4D  Sedan         6   \n",
              "802  15118.893228    25979  Saturn  L Series  L300 Sedan 4D  Sedan         6   \n",
              "803  13585.636802    35662  Saturn  L Series  L300 Sedan 4D  Sedan         6   \n",
              "\n",
              "     Liter  Doors  Cruise  Sound  Leather  \n",
              "0      3.1      4       1      1        1  \n",
              "1      3.1      4       1      1        0  \n",
              "2      3.1      4       1      1        0  \n",
              "3      3.1      4       1      0        0  \n",
              "4      3.1      4       1      0        1  \n",
              "..     ...    ...     ...    ...      ...  \n",
              "799    3.0      4       1      0        0  \n",
              "800    3.0      4       1      1        0  \n",
              "801    3.0      4       1      1        0  \n",
              "802    3.0      4       1      1        0  \n",
              "803    3.0      4       1      0        0  \n",
              "\n",
              "[804 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9d78444-826b-400a-b0a6-27150b6baa90\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Trim</th>\n",
              "      <th>Type</th>\n",
              "      <th>Cylinder</th>\n",
              "      <th>Liter</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cruise</th>\n",
              "      <th>Sound</th>\n",
              "      <th>Leather</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17314.103129</td>\n",
              "      <td>8221</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17542.036083</td>\n",
              "      <td>9135</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16218.847862</td>\n",
              "      <td>13196</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16336.913140</td>\n",
              "      <td>16342</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16339.170324</td>\n",
              "      <td>19832</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799</th>\n",
              "      <td>16507.070267</td>\n",
              "      <td>16229</td>\n",
              "      <td>Saturn</td>\n",
              "      <td>L Series</td>\n",
              "      <td>L300 Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>800</th>\n",
              "      <td>16175.957604</td>\n",
              "      <td>19095</td>\n",
              "      <td>Saturn</td>\n",
              "      <td>L Series</td>\n",
              "      <td>L300 Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>801</th>\n",
              "      <td>15731.132897</td>\n",
              "      <td>20484</td>\n",
              "      <td>Saturn</td>\n",
              "      <td>L Series</td>\n",
              "      <td>L300 Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>802</th>\n",
              "      <td>15118.893228</td>\n",
              "      <td>25979</td>\n",
              "      <td>Saturn</td>\n",
              "      <td>L Series</td>\n",
              "      <td>L300 Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>803</th>\n",
              "      <td>13585.636802</td>\n",
              "      <td>35662</td>\n",
              "      <td>Saturn</td>\n",
              "      <td>L Series</td>\n",
              "      <td>L300 Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>804 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9d78444-826b-400a-b0a6-27150b6baa90')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a9d78444-826b-400a-b0a6-27150b6baa90 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a9d78444-826b-400a-b0a6-27150b6baa90');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df.loc[:,['Mileage']].values\n",
        "y = df.loc[:,'Price'].values\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.3)"
      ],
      "metadata": {
        "id": "89_lJ_g7Ow0M"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "Regression = LinearRegression()\n",
        "Regression.fit(x_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CMPmE1rXVVqo",
        "outputId": "340ffc2b-b615-4b8b-b51d-a7bd93753b5b"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Regression.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rYdi4EU5W49x",
        "outputId": "12fdf1ac-21ff-406a-c984-7b126d3faa86"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.11354478])"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Regression.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URRsxSDMXIl0",
        "outputId": "d1c83b6b-d714-44a6-bf41-f78d9be8a78e"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23454.750522376464"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Regression.predict(x_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yekfa0TeZPa-",
        "outputId": "9944d571-aaf3-4b12-c806-7c66b460d6e9"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([22272.29514777, 21486.45170168, 21730.00526213, 21080.86973528,\n",
              "       20787.4700149 , 22022.95080337, 20872.74214725, 19847.09211856,\n",
              "       21051.34809158, 22507.21930468, 21216.55575147, 22468.38698875,\n",
              "       20056.92287833, 20471.24779306, 21481.22864164, 21055.322159  ,\n",
              "       21335.89131885, 22318.96205376, 21488.26841821, 22843.99313232,\n",
              "       22870.67615643, 21372.45273912, 21793.93097519, 19543.47336768,\n",
              "       21795.52060216, 19885.35671058, 20334.99405295, 20981.97222891,\n",
              "       22056.67360404, 20676.42321671, 22815.26630212, 20588.88018869,\n",
              "       20414.13476699, 21010.47196955, 22086.30879252, 21359.96281294,\n",
              "       20937.57621859, 18831.32048603, 21022.84835094, 22161.1348048 ,\n",
              "       22207.34753165, 22215.40921127, 21028.6391349 , 20323.86666417,\n",
              "       21182.15168209, 19270.05752919, 19405.51645582, 21387.10001618,\n",
              "       20042.04851171, 19523.71657536, 20479.42301746, 21366.54841038,\n",
              "       20722.06821965, 21022.96189573, 22389.70045383, 22039.30125218,\n",
              "       21055.77633814, 20423.10480488, 20344.30472519, 21475.55140247,\n",
              "       21486.22461211, 19767.15659103, 21253.57135087, 20488.27951057,\n",
              "       22652.55662747, 19940.76656489, 21257.99959742, 21307.61866778,\n",
              "       21948.91960457, 20668.13444752, 21805.96672224, 20805.18300112,\n",
              "       21266.40191139, 20591.60526349, 18919.09060362, 21800.63011742,\n",
              "       17733.56951986, 21529.25808503, 20562.0836198 , 21813.80131229,\n",
              "       21450.0038262 , 19816.88920617, 21098.58272149, 20891.93121565,\n",
              "       22056.56005926, 23117.18188125, 23157.71736893, 21203.15746703,\n",
              "       21611.35096344, 19665.3069203 , 21132.41906695, 21329.19217663,\n",
              "       21068.83398823, 20872.74214725, 21745.90153181, 21025.9140601 ,\n",
              "       20902.37733573, 21344.97490153, 19518.72060489, 22256.28533331,\n",
              "       21128.89917866, 20552.88649234, 20726.61001098, 20847.30811577,\n",
              "       22427.28377715, 22446.47284555, 22415.81575402, 22768.03167221,\n",
              "       21236.198999  , 20311.14964843, 20749.43251245, 21757.48309971,\n",
              "       23424.54760998, 20982.88058718, 22004.55654845, 20391.31226553,\n",
              "       18735.14805446, 22044.52431222, 21168.29921851, 20219.63255298,\n",
              "       22228.46686137, 20465.34346432, 20929.9687181 , 20666.2041862 ,\n",
              "       20861.27412413, 21022.62126138, 20742.61982545, 20746.48034808,\n",
              "       20773.73109611, 20060.78340097, 20888.8655065 , 21807.89698356,\n",
              "       20610.68078711, 20799.16512759, 20677.33157498, 19719.58132677,\n",
              "       22558.65509157, 21803.12810265, 20521.88876647, 22687.07424163,\n",
              "       21415.59975682, 22057.80905188, 22169.19648442, 20626.91769114,\n",
              "       21616.11984435, 21342.59046107, 21321.24404179, 22725.79301278,\n",
              "       20979.81487803, 21868.18926356, 21712.63291026, 19312.63682297,\n",
              "       20682.55463501, 21240.62724556, 20088.26123856, 20588.31246477,\n",
              "       19912.49391382, 20229.17031479, 23043.15068245, 21575.13017753,\n",
              "       19239.05980331, 21962.20434423, 20927.81136722, 20868.3139007 ,\n",
              "       20593.53552481, 19860.49040301, 21079.73428744, 22342.57936871,\n",
              "       22649.6044631 , 23183.15140042, 21389.7115462 , 21842.41459772,\n",
              "       21581.71577497, 20870.69834115, 20864.33983328, 19041.71896972,\n",
              "       21148.76951576, 20610.56724232, 19911.9261899 , 22411.8416866 ,\n",
              "       20727.29127968, 21508.82002401, 21458.29259539, 21198.16149656,\n",
              "       21493.49147825, 21018.98782831, 20802.45792631, 20132.43015931,\n",
              "       21025.57342575, 20014.6842189 , 20517.46051991, 19214.42058531,\n",
              "       21204.74709399, 21649.61555546, 22830.36775831, 17892.07803752,\n",
              "       20828.11904737, 20248.01874884, 21014.44603697, 21249.82437301,\n",
              "       20526.77119215, 21469.07934981, 22318.05369549, 20387.33819811,\n",
              "       20282.08218387, 20733.87687712, 22248.33719847, 20960.62580963,\n",
              "       22460.77948826, 22926.54018988, 20568.44212767, 22574.2107269 ,\n",
              "       20520.18559471, 22488.82504977, 20693.56847901, 20970.73129535,\n",
              "       21026.48178401, 21665.85245949, 20932.80733769, 20889.77386477,\n",
              "       20829.70867434, 21280.59500932, 20525.97637867, 23204.72490927,\n",
              "       22256.28533331, 23192.68916223, 21629.17749444, 20115.3984418 ,\n",
              "       23388.55391364, 22919.27332374, 20772.70919306, 23042.69650332,\n",
              "       21473.2805068 , 23131.60206874, 20913.39117972, 20197.94549935,\n",
              "       20380.29842153, 22253.78734807, 20732.40079494, 21735.22832216,\n",
              "       21089.72622838, 19843.45868549])"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(x,y,'o')\n",
        "plt.plot(x,Regression.predict(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "MdAmHCLbaGEK",
        "outputId": "63ac62fa-5d9f-4ae4-88c5-0aea1c73bd5f"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fa801029220>]"
            ]
          },
          "metadata": {},
          "execution_count": 120
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "R2_score = Regression.score(x,y)\n",
        "R2_score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XlBITjSQaF2w",
        "outputId": "41286635-1b0b-4392-e26a-83224bbd2986"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.01787065941120447"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tasks, Part 2"
      ],
      "metadata": {
        "id": "ZFx_GECPiLoO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Use mileage, cylinders, liters, doors, cruise, sound, and leather to find the linear regression equation.\n",
        "Find the equation's  R2  score (use the .score method) to determine whether the equation is a good fit for this data. (0.8 and greater is considered a strong correlation.)\n",
        "Find the combination of the factors that is the best predictor for price."
      ],
      "metadata": {
        "id": "-o8gTNy52l5L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "APOmNCR4szUz",
        "outputId": "68308e0c-22d8-431c-d1be-6e9934e50f00"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Price  Mileage   Make    Model      Trim   Type  Cylinder  Liter  \\\n",
              "0  17314.103129     8221  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "1  17542.036083     9135  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "2  16218.847862    13196  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "3  16336.913140    16342  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "4  16339.170324    19832  Buick  Century  Sedan 4D  Sedan         6    3.1   \n",
              "\n",
              "   Doors  Cruise  Sound  Leather  \n",
              "0      4       1      1        1  \n",
              "1      4       1      1        0  \n",
              "2      4       1      1        0  \n",
              "3      4       1      0        0  \n",
              "4      4       1      0        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0be66cd-269d-4673-a05d-1dc03e151df0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Trim</th>\n",
              "      <th>Type</th>\n",
              "      <th>Cylinder</th>\n",
              "      <th>Liter</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cruise</th>\n",
              "      <th>Sound</th>\n",
              "      <th>Leather</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17314.103129</td>\n",
              "      <td>8221</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17542.036083</td>\n",
              "      <td>9135</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16218.847862</td>\n",
              "      <td>13196</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16336.913140</td>\n",
              "      <td>16342</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16339.170324</td>\n",
              "      <td>19832</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0be66cd-269d-4673-a05d-1dc03e151df0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e0be66cd-269d-4673-a05d-1dc03e151df0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e0be66cd-269d-4673-a05d-1dc03e151df0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df.loc[:,[ 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound','Leather','Mileage', ]].values\n",
        "y = df.loc[:,'Price'].values\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.3)"
      ],
      "metadata": {
        "id": "_Dku5ZhdiRxI"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(x_train)\n",
        "x_train_scaled = scaler.transform(x_train)\n",
        "x_test_scaled = scaler.transform(x_test)"
      ],
      "metadata": {
        "id": "p2Wj6QkoWk_K"
      },
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "Regression = LinearRegression()\n",
        "Regression.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5UmfGuZ8tV5P",
        "outputId": "b66f036b-51c0-4984-831f-fdad2b6a7a94"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Regression.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fWlin5NxyYaW",
        "outputId": "83e3f04b-0693-43da-d6af-3264121d575c"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 3.45911152e+03, -2.21170664e+02, -1.63969536e+03,  6.59322541e+03,\n",
              "       -2.17849187e+03,  3.29477873e+03, -1.59801608e-01])"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Regression.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_v1j-Ud2moy",
        "outputId": "27f3f89d-9e05-463e-ef44-7b6f930ce05a"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7044.581975293093"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coeff_df = pd.DataFrame(Regression.coef_,['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound','Leather'],columns=['Coefficient'])\n",
        "coeff_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "1p4l6dZS2wPr",
        "outputId": "32135cd5-3e10-45f9-9773-61cf90faf4f6"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Coefficient\n",
              "Mileage   3459.111515\n",
              "Cylinder  -221.170664\n",
              "Liter    -1639.695357\n",
              "Doors     6593.225406\n",
              "Cruise   -2178.491870\n",
              "Sound     3294.778732\n",
              "Leather     -0.159802"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16f9c220-862a-4409-887f-d318f8646a53\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Coefficient</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Mileage</th>\n",
              "      <td>3459.111515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cylinder</th>\n",
              "      <td>-221.170664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liter</th>\n",
              "      <td>-1639.695357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Doors</th>\n",
              "      <td>6593.225406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cruise</th>\n",
              "      <td>-2178.491870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sound</th>\n",
              "      <td>3294.778732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Leather</th>\n",
              "      <td>-0.159802</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16f9c220-862a-4409-887f-d318f8646a53')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-16f9c220-862a-4409-887f-d318f8646a53 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-16f9c220-862a-4409-887f-d318f8646a53');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = Regression.predict(x_test)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YjHovtmUdYUN",
        "outputId": "fac57a15-4264-4f06-b421-a88c3b84aff8"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([24469.38163998, 26707.68104742, 25920.85964627, 16493.19528804,\n",
              "       21406.95502397, 31037.79371229, 24031.52523381, 36903.38808531,\n",
              "       19975.61039293, 14038.79373387, 19735.90960816,  7810.91437227,\n",
              "        9176.35728819, 20169.14367124, 11390.2070302 , 16122.94948491,\n",
              "       12164.21895602, 17815.02983441, 34673.3566444 , 26051.52482073,\n",
              "       18795.55933002, 13678.28130602, 23897.77390712, 12634.19548541,\n",
              "       16056.92824245, 26490.02043334, 12242.04233916, 20446.9688775 ,\n",
              "       24532.6939894 , 16514.24474455, 20927.90013794, 24793.4902138 ,\n",
              "       26898.47334362, 14729.78192347, 22528.38959102, 17539.11690174,\n",
              "       18370.97144376, 14975.5507605 , 23481.76598489, 16696.14333031,\n",
              "       23445.40384795, 27939.37820257, 33164.11390955, 25550.26070804,\n",
              "       33454.41554478, 29865.48911533, 19319.88813564, 35730.92368675,\n",
              "       23993.49245109, 11930.10960016, 24154.92298787, 23123.40360764,\n",
              "       24041.1777748 ,  6844.34150871, 17807.98539202, 18350.36522152,\n",
              "       21003.16669535, 23020.34239429, 24081.17704871, 11209.96164014,\n",
              "       24152.63870255, 19810.28835826, 26160.34971584, 17377.98981798,\n",
              "       23425.56835979, 18666.43927141, 25819.01348096, 23003.28905765,\n",
              "       24712.18472717,  8408.48893296, 26632.81196149, 24080.61524011,\n",
              "       34615.66826388, 18160.425554  , 32701.64805573, 11120.55465358,\n",
              "       19037.80344619, 22420.42872603, 16383.5138575 , 21596.82966941,\n",
              "       22902.64495717, 12665.03719577,  9467.75196778, 12034.46005025,\n",
              "       29341.47326531, 27694.2544393 , 20359.39759627, 21546.33236126,\n",
              "       20938.51862399, 22663.26214825, 18803.30742334, 18793.96131394,\n",
              "       24220.20921588,  9108.65240771, 10764.51667075, 20620.25170734,\n",
              "       22304.82237317, 36142.68831464, 21101.44468433, 24944.05261386,\n",
              "       21296.54401632, 24856.80518249,  9116.8693535 , 17838.84027402,\n",
              "       13691.7046411 , 20745.56650311, 12180.51872004, 24639.20426416,\n",
              "       27327.32297307, 11156.98942022, 34231.50519803, 24478.47418145,\n",
              "       20360.97588288, 18708.33820534, 23955.18180162, 27848.99887544,\n",
              "       27517.86437658, 16553.39875781, 26604.25028979, 20032.69152942,\n",
              "       17569.8941676 , 27563.99997851, 24631.42047059,  8902.53367996,\n",
              "       21247.89453726, 16643.9336399 , 23192.99971094, 20194.46260725,\n",
              "       21952.77943054, 17924.96016914, 27010.49427089, 20914.60626944,\n",
              "       15167.48114731, 18810.43405121, 18698.89252876, 11512.22839501,\n",
              "       10204.73163761, 30656.02767056, 21471.33810467, 22874.04046932,\n",
              "       24418.68281312, 26102.05851965, 10416.78280562,  9452.46355436,\n",
              "       25705.43092837, 20991.9621513 , 35128.95102907, 22729.34366595,\n",
              "       11899.58749302, 19158.06699331, 22690.65980314, 15329.39301769,\n",
              "       20772.57297488, 23733.52614733, 24439.84925509, 23703.45148261,\n",
              "       23249.49790029, 23087.85502094, 38063.06705522,  6257.39020219,\n",
              "       32057.36020379, 29848.55014488, 20426.67407328, 22724.50683145,\n",
              "       24479.19398257, 32907.38907339, 10238.79472682, 34408.80733496,\n",
              "       10585.01240206, 25401.59159188, 25863.68158318, 21439.58488705,\n",
              "       36209.23546666, 35701.15647148, 18517.9971084 , 18035.87565679,\n",
              "       22999.48473167, 21975.31145729, 21674.08542603, 20408.1949734 ,\n",
              "       22559.15495333, 19041.33420327, 34047.2539439 , 32806.79751385,\n",
              "       18154.59507997, 19421.11234377, 21416.22555894, 22508.61590871,\n",
              "       20634.07683111, 32966.99507321, 22936.80682056, 36122.43632656,\n",
              "       23159.76574458, 10045.75438424, 17433.96744361, 26950.62382809,\n",
              "       18743.78324972,  9938.81619582, 11389.88742699, 14592.5063059 ,\n",
              "       16241.12632686, 24420.96175273, 13336.55283822, 16845.41812102,\n",
              "       26123.30927466, 23200.96364686, 26485.06658349, 11030.1069434 ,\n",
              "       17542.47273551, 14493.82132159, 17913.14802178, 25414.60258592,\n",
              "       13605.30985778, 36365.17496925, 23644.64449084, 16029.92177068,\n",
              "       17923.53774559, 29548.42715227, 25798.64232869, 31579.36136211,\n",
              "       19801.0507776 , 24123.36944137, 10568.44009762, 25475.04931087,\n",
              "       34719.85891235, 23936.02831667, 18044.54064388, 26203.97555485,\n",
              "       21000.30536681, 12046.19263142, 14296.91289904, 27119.91555628,\n",
              "       20840.20520627, 22167.65611392, 26463.54590735, 11958.14194536,\n",
              "       21638.85749234, 23744.6651971 , 21377.10245829, 21940.27947637,\n",
              "       15139.66701201, 15663.3783786 ])"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "print('r2 score:',metrics.r2_score(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3wYavJ7rdAiT",
        "outputId": "e8a14352-83d3-4d1e-ec8e-f01bedfea578"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2 score: 0.4176847666028761\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def combinations(L):\n",
        "  if L:\n",
        "    result = combinations(L[:-1])\n",
        "    return result+[i+[L[-1]]for i in result]\n",
        "  else:\n",
        "    return[[]]\n",
        "combi=combinations(['Mileage','Cylinder','Liter', 'Doors', 'Cruise', 'Sound', 'Leather'])\n",
        "combi = combi[1:]\n",
        "print(combi)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fGH7IF1A8vsU",
        "outputId": "b26aef49-ae10-4bf1-f402-4bb34dafc80c"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[['Mileage'], ['Cylinder'], ['Mileage', 'Cylinder'], ['Liter'], ['Mileage', 'Liter'], ['Cylinder', 'Liter'], ['Mileage', 'Cylinder', 'Liter'], ['Doors'], ['Mileage', 'Doors'], ['Cylinder', 'Doors'], ['Mileage', 'Cylinder', 'Doors'], ['Liter', 'Doors'], ['Mileage', 'Liter', 'Doors'], ['Cylinder', 'Liter', 'Doors'], ['Mileage', 'Cylinder', 'Liter', 'Doors'], ['Cruise'], ['Mileage', 'Cruise'], ['Cylinder', 'Cruise'], ['Mileage', 'Cylinder', 'Cruise'], ['Liter', 'Cruise'], ['Mileage', 'Liter', 'Cruise'], ['Cylinder', 'Liter', 'Cruise'], ['Mileage', 'Cylinder', 'Liter', 'Cruise'], ['Doors', 'Cruise'], ['Mileage', 'Doors', 'Cruise'], ['Cylinder', 'Doors', 'Cruise'], ['Mileage', 'Cylinder', 'Doors', 'Cruise'], ['Liter', 'Doors', 'Cruise'], ['Mileage', 'Liter', 'Doors', 'Cruise'], ['Cylinder', 'Liter', 'Doors', 'Cruise'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise'], ['Sound'], ['Mileage', 'Sound'], ['Cylinder', 'Sound'], ['Mileage', 'Cylinder', 'Sound'], ['Liter', 'Sound'], ['Mileage', 'Liter', 'Sound'], ['Cylinder', 'Liter', 'Sound'], ['Mileage', 'Cylinder', 'Liter', 'Sound'], ['Doors', 'Sound'], ['Mileage', 'Doors', 'Sound'], ['Cylinder', 'Doors', 'Sound'], ['Mileage', 'Cylinder', 'Doors', 'Sound'], ['Liter', 'Doors', 'Sound'], ['Mileage', 'Liter', 'Doors', 'Sound'], ['Cylinder', 'Liter', 'Doors', 'Sound'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Sound'], ['Cruise', 'Sound'], ['Mileage', 'Cruise', 'Sound'], ['Cylinder', 'Cruise', 'Sound'], ['Mileage', 'Cylinder', 'Cruise', 'Sound'], ['Liter', 'Cruise', 'Sound'], ['Mileage', 'Liter', 'Cruise', 'Sound'], ['Cylinder', 'Liter', 'Cruise', 'Sound'], ['Mileage', 'Cylinder', 'Liter', 'Cruise', 'Sound'], ['Doors', 'Cruise', 'Sound'], ['Mileage', 'Doors', 'Cruise', 'Sound'], ['Cylinder', 'Doors', 'Cruise', 'Sound'], ['Mileage', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Liter', 'Doors', 'Cruise', 'Sound'], ['Mileage', 'Liter', 'Doors', 'Cruise', 'Sound'], ['Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound'], ['Leather'], ['Mileage', 'Leather'], ['Cylinder', 'Leather'], ['Mileage', 'Cylinder', 'Leather'], ['Liter', 'Leather'], ['Mileage', 'Liter', 'Leather'], ['Cylinder', 'Liter', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Leather'], ['Doors', 'Leather'], ['Mileage', 'Doors', 'Leather'], ['Cylinder', 'Doors', 'Leather'], ['Mileage', 'Cylinder', 'Doors', 'Leather'], ['Liter', 'Doors', 'Leather'], ['Mileage', 'Liter', 'Doors', 'Leather'], ['Cylinder', 'Liter', 'Doors', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Leather'], ['Cruise', 'Leather'], ['Mileage', 'Cruise', 'Leather'], ['Cylinder', 'Cruise', 'Leather'], ['Mileage', 'Cylinder', 'Cruise', 'Leather'], ['Liter', 'Cruise', 'Leather'], ['Mileage', 'Liter', 'Cruise', 'Leather'], ['Cylinder', 'Liter', 'Cruise', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Cruise', 'Leather'], ['Doors', 'Cruise', 'Leather'], ['Mileage', 'Doors', 'Cruise', 'Leather'], ['Cylinder', 'Doors', 'Cruise', 'Leather'], ['Mileage', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Liter', 'Doors', 'Cruise', 'Leather'], ['Mileage', 'Liter', 'Doors', 'Cruise', 'Leather'], ['Cylinder', 'Liter', 'Doors', 'Cruise', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Leather'], ['Sound', 'Leather'], ['Mileage', 'Sound', 'Leather'], ['Cylinder', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Sound', 'Leather'], ['Liter', 'Sound', 'Leather'], ['Mileage', 'Liter', 'Sound', 'Leather'], ['Cylinder', 'Liter', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Sound', 'Leather'], ['Doors', 'Sound', 'Leather'], ['Mileage', 'Doors', 'Sound', 'Leather'], ['Cylinder', 'Doors', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Liter', 'Doors', 'Sound', 'Leather'], ['Mileage', 'Liter', 'Doors', 'Sound', 'Leather'], ['Cylinder', 'Liter', 'Doors', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Sound', 'Leather'], ['Cruise', 'Sound', 'Leather'], ['Mileage', 'Cruise', 'Sound', 'Leather'], ['Cylinder', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Liter', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Liter', 'Cruise', 'Sound', 'Leather'], ['Cylinder', 'Liter', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Cruise', 'Sound', 'Leather'], ['Doors', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Liter', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Liter', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Mileage', 'Cylinder', 'Liter', 'Doors', 'Cruise', 'Sound', 'Leather']]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ubo8VtRp8xSe",
        "outputId": "540ac981-5ce2-452a-a868-0f5efbc6f412"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Price', 'Mileage', 'Make', 'Model', 'Trim', 'Type', 'Cylinder',\n",
              "       'Liter', 'Doors', 'Cruise', 'Sound', 'Leather'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "R2_score = []\n",
        "for i in combi:\n",
        "  combinations_x = df[i].values\n",
        "  y= df['Price'].values\n",
        "\n",
        "  from sklearn.model_selection import train_test_split\n",
        "  x_train,x_test,y_train,y_test=train_test_split(combinations_x,y,test_size=0.3)\n",
        "\n",
        "  from sklearn.preprocessing import StandardScaler\n",
        "  scaler = StandardScaler()\n",
        "  scaler.fit(x_train)\n",
        "  x_train_scaled = scaler.transform(x_train)\n",
        "  x_test_scaled = scaler.transform(x_test)\n",
        "\n",
        "  from sklearn.linear_model import LinearRegression\n",
        "  Regressor = LinearRegression()\n",
        "  Regressor.fit(x_train_scaled,y_train)\n",
        "\n",
        "  y_pred = Regressor.predict(x_test_scaled)\n",
        "\n",
        "  from sklearn import metrics\n",
        "  #metrics.r2_score(y_test,y_pred)\n",
        "  R2_score.append(metrics.r2_score(y_test,y_pred))"
      ],
      "metadata": {
        "id": "xqtTj7Vt8xGp"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = pd.DataFrame({'feature_combinationn': combi,\"R2_score\":R2_score})\n",
        "df2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "vS4pN3sH8w6u",
        "outputId": "b4d3093c-2c39-4a82-d136-dc611fb1d336"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  feature_combinationn  R2_score\n",
              "0                                            [Mileage]  0.023893\n",
              "1                                           [Cylinder]  0.328796\n",
              "2                                  [Mileage, Cylinder]  0.315087\n",
              "3                                              [Liter]  0.242792\n",
              "4                                     [Mileage, Liter]  0.343316\n",
              "..                                                 ...       ...\n",
              "122  [Mileage, Cylinder, Doors, Cruise, Sound, Leat...  0.444316\n",
              "123             [Liter, Doors, Cruise, Sound, Leather]  0.397347\n",
              "124    [Mileage, Liter, Doors, Cruise, Sound, Leather]  0.488587\n",
              "125   [Cylinder, Liter, Doors, Cruise, Sound, Leather]  0.387651\n",
              "126  [Mileage, Cylinder, Liter, Doors, Cruise, Soun...  0.471138\n",
              "\n",
              "[127 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d44982b0-faeb-4e4b-8910-eb52a6c8ad55\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_combinationn</th>\n",
              "      <th>R2_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[Mileage]</td>\n",
              "      <td>0.023893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[Cylinder]</td>\n",
              "      <td>0.328796</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[Mileage, Cylinder]</td>\n",
              "      <td>0.315087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[Liter]</td>\n",
              "      <td>0.242792</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[Mileage, Liter]</td>\n",
              "      <td>0.343316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>122</th>\n",
              "      <td>[Mileage, Cylinder, Doors, Cruise, Sound, Leat...</td>\n",
              "      <td>0.444316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>123</th>\n",
              "      <td>[Liter, Doors, Cruise, Sound, Leather]</td>\n",
              "      <td>0.397347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>[Mileage, Liter, Doors, Cruise, Sound, Leather]</td>\n",
              "      <td>0.488587</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>[Cylinder, Liter, Doors, Cruise, Sound, Leather]</td>\n",
              "      <td>0.387651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>[Mileage, Cylinder, Liter, Doors, Cruise, Soun...</td>\n",
              "      <td>0.471138</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>127 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d44982b0-faeb-4e4b-8910-eb52a6c8ad55')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d44982b0-faeb-4e4b-8910-eb52a6c8ad55 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d44982b0-faeb-4e4b-8910-eb52a6c8ad55');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['R2_score'].max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ABH3g7Lz8wku",
        "outputId": "da2eacfa-7aef-4a16-8fdb-cde1e24fe8db"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4885871295154296"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['R2_score'].argmax()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Km7XV-QCd-Nr",
        "outputId": "cf9c69ad-ab38-49c3-b126-bd5e10fc8539"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "124"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2['feature_combinationn'][df2['R2_score'].argmax()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YnfRlfrsf91j",
        "outputId": "118d5074-34bd-49b5-8d03-6836c3ab49e8"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Mileage', 'Liter', 'Doors', 'Cruise', 'Sound', 'Leather']"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uuMufXGDhELi"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5hFyAsBHhS-0"
      },
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tasks, Hard Mode\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "qjK2EiLLjVUD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Research dummy variables in scikit-learn to see how to use the make, model, and body type.\n",
        "Find the best combination of factors to predict price."
      ],
      "metadata": {
        "id": "57IkwHUd3Yqr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns=['Liter'], axis=1, inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hteVH5oWho11",
        "outputId": "a17c7609-ca7e-4a55-a5b7-5de65cfe7a4b"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Price  Mileage   Make    Model      Trim   Type  Cylinder  Doors  \\\n",
              "0  17314.103129     8221  Buick  Century  Sedan 4D  Sedan         6      4   \n",
              "1  17542.036083     9135  Buick  Century  Sedan 4D  Sedan         6      4   \n",
              "2  16218.847862    13196  Buick  Century  Sedan 4D  Sedan         6      4   \n",
              "3  16336.913140    16342  Buick  Century  Sedan 4D  Sedan         6      4   \n",
              "4  16339.170324    19832  Buick  Century  Sedan 4D  Sedan         6      4   \n",
              "\n",
              "   Cruise  Sound  Leather  \n",
              "0       1      1        1  \n",
              "1       1      1        0  \n",
              "2       1      1        0  \n",
              "3       1      0        0  \n",
              "4       1      0        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d13aee3-5592-441f-9e1f-d564dcb0c943\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Make</th>\n",
              "      <th>Model</th>\n",
              "      <th>Trim</th>\n",
              "      <th>Type</th>\n",
              "      <th>Cylinder</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cruise</th>\n",
              "      <th>Sound</th>\n",
              "      <th>Leather</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17314.103129</td>\n",
              "      <td>8221</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17542.036083</td>\n",
              "      <td>9135</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16218.847862</td>\n",
              "      <td>13196</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16336.913140</td>\n",
              "      <td>16342</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16339.170324</td>\n",
              "      <td>19832</td>\n",
              "      <td>Buick</td>\n",
              "      <td>Century</td>\n",
              "      <td>Sedan 4D</td>\n",
              "      <td>Sedan</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d13aee3-5592-441f-9e1f-d564dcb0c943')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7d13aee3-5592-441f-9e1f-d564dcb0c943 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7d13aee3-5592-441f-9e1f-d564dcb0c943');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 138
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cat_var = ['Make','Model','Type','Cylinder','Doors','Cruise','Sound','Leather','Trim']"
      ],
      "metadata": {
        "id": "M1Xdy09FjvJH"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df = pd.get_dummies(df, columns = ['Make','Model','Type','Trim'],drop_first = False )\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "oanaq-K77tps",
        "outputId": "0617b3f1-b338-4cca-f141-92429e1b7f52"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Price  Mileage  Cylinder  Doors  Cruise  Sound  Leather  \\\n",
              "0    17314.103129     8221         6      4       1      1        1   \n",
              "1    17542.036083     9135         6      4       1      1        0   \n",
              "2    16218.847862    13196         6      4       1      1        0   \n",
              "3    16336.913140    16342         6      4       1      0        0   \n",
              "4    16339.170324    19832         6      4       1      0        1   \n",
              "..            ...      ...       ...    ...     ...    ...      ...   \n",
              "799  16507.070267    16229         6      4       1      0        0   \n",
              "800  16175.957604    19095         6      4       1      1        0   \n",
              "801  15731.132897    20484         6      4       1      1        0   \n",
              "802  15118.893228    25979         6      4       1      1        0   \n",
              "803  13585.636802    35662         6      4       1      0        0   \n",
              "\n",
              "     Make_Buick  Make_Cadillac  Make_Chevrolet  ...  Trim_Quad Coupe 2D  \\\n",
              "0             1              0               0  ...                   0   \n",
              "1             1              0               0  ...                   0   \n",
              "2             1              0               0  ...                   0   \n",
              "3             1              0               0  ...                   0   \n",
              "4             1              0               0  ...                   0   \n",
              "..          ...            ...             ...  ...                 ...   \n",
              "799           0              0               0  ...                   0   \n",
              "800           0              0               0  ...                   0   \n",
              "801           0              0               0  ...                   0   \n",
              "802           0              0               0  ...                   0   \n",
              "803           0              0               0  ...                   0   \n",
              "\n",
              "     Trim_SE Sedan 4D  Trim_SLE Sedan 4D  Trim_SS Coupe 2D  Trim_SS Sedan 4D  \\\n",
              "0                   0                  0                 0                 0   \n",
              "1                   0                  0                 0                 0   \n",
              "2                   0                  0                 0                 0   \n",
              "3                   0                  0                 0                 0   \n",
              "4                   0                  0                 0                 0   \n",
              "..                ...                ...               ...               ...   \n",
              "799                 0                  0                 0                 0   \n",
              "800                 0                  0                 0                 0   \n",
              "801                 0                  0                 0                 0   \n",
              "802                 0                  0                 0                 0   \n",
              "803                 0                  0                 0                 0   \n",
              "\n",
              "     Trim_SVM Hatchback 4D  Trim_SVM Sedan 4D  Trim_Sedan 4D  \\\n",
              "0                        0                  0              1   \n",
              "1                        0                  0              1   \n",
              "2                        0                  0              1   \n",
              "3                        0                  0              1   \n",
              "4                        0                  0              1   \n",
              "..                     ...                ...            ...   \n",
              "799                      0                  0              0   \n",
              "800                      0                  0              0   \n",
              "801                      0                  0              0   \n",
              "802                      0                  0              0   \n",
              "803                      0                  0              0   \n",
              "\n",
              "     Trim_Special Ed Ultra 4D  Trim_Sportwagon 4D  \n",
              "0                           0                   0  \n",
              "1                           0                   0  \n",
              "2                           0                   0  \n",
              "3                           0                   0  \n",
              "4                           0                   0  \n",
              "..                        ...                 ...  \n",
              "799                         0                   0  \n",
              "800                         0                   0  \n",
              "801                         0                   0  \n",
              "802                         0                   0  \n",
              "803                         0                   0  \n",
              "\n",
              "[804 rows x 97 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd3e1008-052d-47ab-a9fe-c6791de80b36\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Cylinder</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Cruise</th>\n",
              "      <th>Sound</th>\n",
              "      <th>Leather</th>\n",
              "      <th>Make_Buick</th>\n",
              "      <th>Make_Cadillac</th>\n",
              "      <th>Make_Chevrolet</th>\n",
              "      <th>...</th>\n",
              "      <th>Trim_Quad Coupe 2D</th>\n",
              "      <th>Trim_SE Sedan 4D</th>\n",
              "      <th>Trim_SLE Sedan 4D</th>\n",
              "      <th>Trim_SS Coupe 2D</th>\n",
              "      <th>Trim_SS Sedan 4D</th>\n",
              "      <th>Trim_SVM Hatchback 4D</th>\n",
              "      <th>Trim_SVM Sedan 4D</th>\n",
              "      <th>Trim_Sedan 4D</th>\n",
              "      <th>Trim_Special Ed Ultra 4D</th>\n",
              "      <th>Trim_Sportwagon 4D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17314.103129</td>\n",
              "      <td>8221</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17542.036083</td>\n",
              "      <td>9135</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16218.847862</td>\n",
              "      <td>13196</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>16336.913140</td>\n",
              "      <td>16342</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>16339.170324</td>\n",
              "      <td>19832</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799</th>\n",
              "      <td>16507.070267</td>\n",
              "      <td>16229</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>800</th>\n",
              "      <td>16175.957604</td>\n",
              "      <td>19095</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>801</th>\n",
              "      <td>15731.132897</td>\n",
              "      <td>20484</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>802</th>\n",
              "      <td>15118.893228</td>\n",
              "      <td>25979</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>803</th>\n",
              "      <td>13585.636802</td>\n",
              "      <td>35662</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>804 rows × 97 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd3e1008-052d-47ab-a9fe-c6791de80b36')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fd3e1008-052d-47ab-a9fe-c6791de80b36 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fd3e1008-052d-47ab-a9fe-c6791de80b36');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df.iloc[:,1:]\n",
        "y = df.iloc[:, 0]\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test = train_test_split(x,y, test_size =0.3 )\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(x_train)\n",
        "x_train = scaler.transform(x_train)\n",
        "x_test = scaler.transform(x_test)\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "Regressor = LinearRegression()\n",
        "Regressor.fit(x_train, y_train)\n",
        "\n",
        "y_pred = Regressor.predict(x_test)\n",
        "\n",
        "from sklearn import metrics\n",
        "print('R2_score:',metrics.r2_score(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D4k0F_438So_",
        "outputId": "056667b0-e1aa-4757-dd17-204158cf470b"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R2_score: 0.988920604856723\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nofHFxsu_Pn-",
        "outputId": "05fbbcfd-30ff-46ac-9415-2ee9703cec05"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(804, 97)"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"car_data.csv\")\n",
        "df.drop(columns = [\"Liter\",\"Trim\"], axis =1, inplace = True)\n",
        "to_encode = ['Make', 'Model','Type']"
      ],
      "metadata": {
        "id": "EuVQPTtFB3ZS"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def combinations(L):\n",
        "  if L:\n",
        "    result =combinations(L[:-1])\n",
        "    return result+[i+[L[-1]]for i in result]\n",
        "  else:\n",
        "    return[[]]\n",
        "\n",
        "combination = combinations(['Make','Model','Type','Cylinder','Doors','Cruise','Sound','Leather','Mileage'])\n",
        "combi=combination[1:]\n",
        "print(combi)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hKFC5-_7CRlX",
        "outputId": "4498952c-dbe2-4ba1-8c04-0e6e4db490eb"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[['Make'], ['Model'], ['Make', 'Model'], ['Type'], ['Make', 'Type'], ['Model', 'Type'], ['Make', 'Model', 'Type'], ['Cylinder'], ['Make', 'Cylinder'], ['Model', 'Cylinder'], ['Make', 'Model', 'Cylinder'], ['Type', 'Cylinder'], ['Make', 'Type', 'Cylinder'], ['Model', 'Type', 'Cylinder'], ['Make', 'Model', 'Type', 'Cylinder'], ['Doors'], ['Make', 'Doors'], ['Model', 'Doors'], ['Make', 'Model', 'Doors'], ['Type', 'Doors'], ['Make', 'Type', 'Doors'], ['Model', 'Type', 'Doors'], ['Make', 'Model', 'Type', 'Doors'], ['Cylinder', 'Doors'], ['Make', 'Cylinder', 'Doors'], ['Model', 'Cylinder', 'Doors'], ['Make', 'Model', 'Cylinder', 'Doors'], ['Type', 'Cylinder', 'Doors'], ['Make', 'Type', 'Cylinder', 'Doors'], ['Model', 'Type', 'Cylinder', 'Doors'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors'], ['Cruise'], ['Make', 'Cruise'], ['Model', 'Cruise'], ['Make', 'Model', 'Cruise'], ['Type', 'Cruise'], ['Make', 'Type', 'Cruise'], ['Model', 'Type', 'Cruise'], ['Make', 'Model', 'Type', 'Cruise'], ['Cylinder', 'Cruise'], ['Make', 'Cylinder', 'Cruise'], ['Model', 'Cylinder', 'Cruise'], ['Make', 'Model', 'Cylinder', 'Cruise'], ['Type', 'Cylinder', 'Cruise'], ['Make', 'Type', 'Cylinder', 'Cruise'], ['Model', 'Type', 'Cylinder', 'Cruise'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise'], ['Doors', 'Cruise'], ['Make', 'Doors', 'Cruise'], ['Model', 'Doors', 'Cruise'], ['Make', 'Model', 'Doors', 'Cruise'], ['Type', 'Doors', 'Cruise'], ['Make', 'Type', 'Doors', 'Cruise'], ['Model', 'Type', 'Doors', 'Cruise'], ['Make', 'Model', 'Type', 'Doors', 'Cruise'], ['Cylinder', 'Doors', 'Cruise'], ['Make', 'Cylinder', 'Doors', 'Cruise'], ['Model', 'Cylinder', 'Doors', 'Cruise'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise'], ['Type', 'Cylinder', 'Doors', 'Cruise'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise'], ['Sound'], ['Make', 'Sound'], ['Model', 'Sound'], ['Make', 'Model', 'Sound'], ['Type', 'Sound'], ['Make', 'Type', 'Sound'], ['Model', 'Type', 'Sound'], ['Make', 'Model', 'Type', 'Sound'], ['Cylinder', 'Sound'], ['Make', 'Cylinder', 'Sound'], ['Model', 'Cylinder', 'Sound'], ['Make', 'Model', 'Cylinder', 'Sound'], ['Type', 'Cylinder', 'Sound'], ['Make', 'Type', 'Cylinder', 'Sound'], ['Model', 'Type', 'Cylinder', 'Sound'], ['Make', 'Model', 'Type', 'Cylinder', 'Sound'], ['Doors', 'Sound'], ['Make', 'Doors', 'Sound'], ['Model', 'Doors', 'Sound'], ['Make', 'Model', 'Doors', 'Sound'], ['Type', 'Doors', 'Sound'], ['Make', 'Type', 'Doors', 'Sound'], ['Model', 'Type', 'Doors', 'Sound'], ['Make', 'Model', 'Type', 'Doors', 'Sound'], ['Cylinder', 'Doors', 'Sound'], ['Make', 'Cylinder', 'Doors', 'Sound'], ['Model', 'Cylinder', 'Doors', 'Sound'], ['Make', 'Model', 'Cylinder', 'Doors', 'Sound'], ['Type', 'Cylinder', 'Doors', 'Sound'], ['Make', 'Type', 'Cylinder', 'Doors', 'Sound'], ['Model', 'Type', 'Cylinder', 'Doors', 'Sound'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Sound'], ['Cruise', 'Sound'], ['Make', 'Cruise', 'Sound'], ['Model', 'Cruise', 'Sound'], ['Make', 'Model', 'Cruise', 'Sound'], ['Type', 'Cruise', 'Sound'], ['Make', 'Type', 'Cruise', 'Sound'], ['Model', 'Type', 'Cruise', 'Sound'], ['Make', 'Model', 'Type', 'Cruise', 'Sound'], ['Cylinder', 'Cruise', 'Sound'], ['Make', 'Cylinder', 'Cruise', 'Sound'], ['Model', 'Cylinder', 'Cruise', 'Sound'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Sound'], ['Type', 'Cylinder', 'Cruise', 'Sound'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Sound'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Sound'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Sound'], ['Doors', 'Cruise', 'Sound'], ['Make', 'Doors', 'Cruise', 'Sound'], ['Model', 'Doors', 'Cruise', 'Sound'], ['Make', 'Model', 'Doors', 'Cruise', 'Sound'], ['Type', 'Doors', 'Cruise', 'Sound'], ['Make', 'Type', 'Doors', 'Cruise', 'Sound'], ['Model', 'Type', 'Doors', 'Cruise', 'Sound'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Sound'], ['Cylinder', 'Doors', 'Cruise', 'Sound'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound'], ['Leather'], ['Make', 'Leather'], ['Model', 'Leather'], ['Make', 'Model', 'Leather'], ['Type', 'Leather'], ['Make', 'Type', 'Leather'], ['Model', 'Type', 'Leather'], ['Make', 'Model', 'Type', 'Leather'], ['Cylinder', 'Leather'], ['Make', 'Cylinder', 'Leather'], ['Model', 'Cylinder', 'Leather'], ['Make', 'Model', 'Cylinder', 'Leather'], ['Type', 'Cylinder', 'Leather'], ['Make', 'Type', 'Cylinder', 'Leather'], ['Model', 'Type', 'Cylinder', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Leather'], ['Doors', 'Leather'], ['Make', 'Doors', 'Leather'], ['Model', 'Doors', 'Leather'], ['Make', 'Model', 'Doors', 'Leather'], ['Type', 'Doors', 'Leather'], ['Make', 'Type', 'Doors', 'Leather'], ['Model', 'Type', 'Doors', 'Leather'], ['Make', 'Model', 'Type', 'Doors', 'Leather'], ['Cylinder', 'Doors', 'Leather'], ['Make', 'Cylinder', 'Doors', 'Leather'], ['Model', 'Cylinder', 'Doors', 'Leather'], ['Make', 'Model', 'Cylinder', 'Doors', 'Leather'], ['Type', 'Cylinder', 'Doors', 'Leather'], ['Make', 'Type', 'Cylinder', 'Doors', 'Leather'], ['Model', 'Type', 'Cylinder', 'Doors', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Leather'], ['Cruise', 'Leather'], ['Make', 'Cruise', 'Leather'], ['Model', 'Cruise', 'Leather'], ['Make', 'Model', 'Cruise', 'Leather'], ['Type', 'Cruise', 'Leather'], ['Make', 'Type', 'Cruise', 'Leather'], ['Model', 'Type', 'Cruise', 'Leather'], ['Make', 'Model', 'Type', 'Cruise', 'Leather'], ['Cylinder', 'Cruise', 'Leather'], ['Make', 'Cylinder', 'Cruise', 'Leather'], ['Model', 'Cylinder', 'Cruise', 'Leather'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Leather'], ['Type', 'Cylinder', 'Cruise', 'Leather'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Leather'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Leather'], ['Doors', 'Cruise', 'Leather'], ['Make', 'Doors', 'Cruise', 'Leather'], ['Model', 'Doors', 'Cruise', 'Leather'], ['Make', 'Model', 'Doors', 'Cruise', 'Leather'], ['Type', 'Doors', 'Cruise', 'Leather'], ['Make', 'Type', 'Doors', 'Cruise', 'Leather'], ['Model', 'Type', 'Doors', 'Cruise', 'Leather'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Leather'], ['Cylinder', 'Doors', 'Cruise', 'Leather'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Leather'], ['Sound', 'Leather'], ['Make', 'Sound', 'Leather'], ['Model', 'Sound', 'Leather'], ['Make', 'Model', 'Sound', 'Leather'], ['Type', 'Sound', 'Leather'], ['Make', 'Type', 'Sound', 'Leather'], ['Model', 'Type', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Sound', 'Leather'], ['Cylinder', 'Sound', 'Leather'], ['Make', 'Cylinder', 'Sound', 'Leather'], ['Model', 'Cylinder', 'Sound', 'Leather'], ['Make', 'Model', 'Cylinder', 'Sound', 'Leather'], ['Type', 'Cylinder', 'Sound', 'Leather'], ['Make', 'Type', 'Cylinder', 'Sound', 'Leather'], ['Model', 'Type', 'Cylinder', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Sound', 'Leather'], ['Doors', 'Sound', 'Leather'], ['Make', 'Doors', 'Sound', 'Leather'], ['Model', 'Doors', 'Sound', 'Leather'], ['Make', 'Model', 'Doors', 'Sound', 'Leather'], ['Type', 'Doors', 'Sound', 'Leather'], ['Make', 'Type', 'Doors', 'Sound', 'Leather'], ['Model', 'Type', 'Doors', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Doors', 'Sound', 'Leather'], ['Cylinder', 'Doors', 'Sound', 'Leather'], ['Make', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Model', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Make', 'Model', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Type', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Make', 'Type', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Model', 'Type', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Sound', 'Leather'], ['Cruise', 'Sound', 'Leather'], ['Make', 'Cruise', 'Sound', 'Leather'], ['Model', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Cruise', 'Sound', 'Leather'], ['Type', 'Cruise', 'Sound', 'Leather'], ['Make', 'Type', 'Cruise', 'Sound', 'Leather'], ['Model', 'Type', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Cruise', 'Sound', 'Leather'], ['Cylinder', 'Cruise', 'Sound', 'Leather'], ['Make', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Model', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Type', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather'], ['Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Model', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Type', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Type', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Model', 'Type', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather'], ['Mileage'], ['Make', 'Mileage'], ['Model', 'Mileage'], ['Make', 'Model', 'Mileage'], ['Type', 'Mileage'], ['Make', 'Type', 'Mileage'], ['Model', 'Type', 'Mileage'], ['Make', 'Model', 'Type', 'Mileage'], ['Cylinder', 'Mileage'], ['Make', 'Cylinder', 'Mileage'], ['Model', 'Cylinder', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Mileage'], ['Type', 'Cylinder', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Mileage'], ['Doors', 'Mileage'], ['Make', 'Doors', 'Mileage'], ['Model', 'Doors', 'Mileage'], ['Make', 'Model', 'Doors', 'Mileage'], ['Type', 'Doors', 'Mileage'], ['Make', 'Type', 'Doors', 'Mileage'], ['Model', 'Type', 'Doors', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Mileage'], ['Cylinder', 'Doors', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Mileage'], ['Cruise', 'Mileage'], ['Make', 'Cruise', 'Mileage'], ['Model', 'Cruise', 'Mileage'], ['Make', 'Model', 'Cruise', 'Mileage'], ['Type', 'Cruise', 'Mileage'], ['Make', 'Type', 'Cruise', 'Mileage'], ['Model', 'Type', 'Cruise', 'Mileage'], ['Make', 'Model', 'Type', 'Cruise', 'Mileage'], ['Cylinder', 'Cruise', 'Mileage'], ['Make', 'Cylinder', 'Cruise', 'Mileage'], ['Model', 'Cylinder', 'Cruise', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Mileage'], ['Type', 'Cylinder', 'Cruise', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Mileage'], ['Doors', 'Cruise', 'Mileage'], ['Make', 'Doors', 'Cruise', 'Mileage'], ['Model', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Model', 'Doors', 'Cruise', 'Mileage'], ['Type', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Type', 'Doors', 'Cruise', 'Mileage'], ['Model', 'Type', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Mileage'], ['Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Mileage'], ['Sound', 'Mileage'], ['Make', 'Sound', 'Mileage'], ['Model', 'Sound', 'Mileage'], ['Make', 'Model', 'Sound', 'Mileage'], ['Type', 'Sound', 'Mileage'], ['Make', 'Type', 'Sound', 'Mileage'], ['Model', 'Type', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Sound', 'Mileage'], ['Cylinder', 'Sound', 'Mileage'], ['Make', 'Cylinder', 'Sound', 'Mileage'], ['Model', 'Cylinder', 'Sound', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Sound', 'Mileage'], ['Type', 'Cylinder', 'Sound', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Sound', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Sound', 'Mileage'], ['Doors', 'Sound', 'Mileage'], ['Make', 'Doors', 'Sound', 'Mileage'], ['Model', 'Doors', 'Sound', 'Mileage'], ['Make', 'Model', 'Doors', 'Sound', 'Mileage'], ['Type', 'Doors', 'Sound', 'Mileage'], ['Make', 'Type', 'Doors', 'Sound', 'Mileage'], ['Model', 'Type', 'Doors', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Sound', 'Mileage'], ['Cylinder', 'Doors', 'Sound', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Sound', 'Mileage'], ['Cruise', 'Sound', 'Mileage'], ['Make', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Cruise', 'Sound', 'Mileage'], ['Type', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Type', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Type', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Cruise', 'Sound', 'Mileage'], ['Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Type', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Mileage'], ['Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Type', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Type', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Type', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Mileage'], ['Leather', 'Mileage'], ['Make', 'Leather', 'Mileage'], ['Model', 'Leather', 'Mileage'], ['Make', 'Model', 'Leather', 'Mileage'], ['Type', 'Leather', 'Mileage'], ['Make', 'Type', 'Leather', 'Mileage'], ['Model', 'Type', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Leather', 'Mileage'], ['Cylinder', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Leather', 'Mileage'], ['Doors', 'Leather', 'Mileage'], ['Make', 'Doors', 'Leather', 'Mileage'], ['Model', 'Doors', 'Leather', 'Mileage'], ['Make', 'Model', 'Doors', 'Leather', 'Mileage'], ['Type', 'Doors', 'Leather', 'Mileage'], ['Make', 'Type', 'Doors', 'Leather', 'Mileage'], ['Model', 'Type', 'Doors', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Leather', 'Mileage'], ['Cylinder', 'Doors', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Leather', 'Mileage'], ['Cruise', 'Leather', 'Mileage'], ['Make', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Cruise', 'Leather', 'Mileage'], ['Type', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Type', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Type', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cruise', 'Leather', 'Mileage'], ['Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Leather', 'Mileage'], ['Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Type', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Type', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Type', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Leather', 'Mileage'], ['Sound', 'Leather', 'Mileage'], ['Make', 'Sound', 'Leather', 'Mileage'], ['Model', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Sound', 'Leather', 'Mileage'], ['Type', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Sound', 'Leather', 'Mileage'], ['Cylinder', 'Sound', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Sound', 'Leather', 'Mileage'], ['Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Model', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Type', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Sound', 'Leather', 'Mileage'], ['Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Type', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Type', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage'], ['Make', 'Model', 'Type', 'Cylinder', 'Doors', 'Cruise', 'Sound', 'Leather', 'Mileage']]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8lYCcQXdmYWG"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "R2_score =[]\n",
        "for i in combi:\n",
        "  x_combi = df[i]\n",
        "  y=df['Price'].values\n",
        "  \n",
        "  x_combi = pd.get_dummies(x_combi, columns =[k for k in to_encode if k in x_combi.columns])\n",
        "\n",
        "  from sklearn.model_selection import train_test_split\n",
        "  x_train,x_test,y_train,y_test = train_test_split(x_combi, y, train_size= 0.2,random_state=0)\n",
        "\n",
        "  if 'mileage' in x_train:\n",
        "    from sklearn.preprocessing import StandardScaler\n",
        "    scaler=StandardScaler()\n",
        "    scaler.fit(X_train) \n",
        "    X_train=scaler.transform(x_train)\n",
        "    X_test=scaler.transform(x_test) \n",
        "\n",
        "  from sklearn.linear_model import LinearRegression\n",
        "  Regressor = LinearRegression()\n",
        "  Regressor.fit(x_train, y_train)\n",
        "\n",
        "  y_pred = Regressor.predict(x_test)\n",
        "\n",
        "  from sklearn import metrics\n",
        "  R2_score.append(metrics.r2_score(y_test,y_pred))"
      ],
      "metadata": {
        "id": "VQRfTXF_EDmv"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame({'FEATURE_COMBINATION': combi,'R2_score': R2_score }) \n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "Ou3hktXOIOHg",
        "outputId": "97621bb9-7ea3-41e4-ca39-d270acd0ce9e"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                   FEATURE_COMBINATION      R2_score\n",
              "0                                               [Make]  6.015951e-01\n",
              "1                                              [Model] -8.714828e+23\n",
              "2                                        [Make, Model] -9.024487e+21\n",
              "3                                               [Type]  2.959773e-01\n",
              "4                                         [Make, Type]  7.172289e-01\n",
              "..                                                 ...           ...\n",
              "506  [Make, Model, Cylinder, Doors, Cruise, Sound, ...  9.536546e-01\n",
              "507  [Type, Cylinder, Doors, Cruise, Sound, Leather...  6.513649e-01\n",
              "508  [Make, Type, Cylinder, Doors, Cruise, Sound, L...  9.041800e-01\n",
              "509  [Model, Type, Cylinder, Doors, Cruise, Sound, ...  9.635034e-01\n",
              "510  [Make, Model, Type, Cylinder, Doors, Cruise, S...  9.718415e-01\n",
              "\n",
              "[511 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f08bda23-0334-4a06-9ac5-9a05ebc3c4c3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FEATURE_COMBINATION</th>\n",
              "      <th>R2_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[Make]</td>\n",
              "      <td>6.015951e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[Model]</td>\n",
              "      <td>-8.714828e+23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[Make, Model]</td>\n",
              "      <td>-9.024487e+21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[Type]</td>\n",
              "      <td>2.959773e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[Make, Type]</td>\n",
              "      <td>7.172289e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>506</th>\n",
              "      <td>[Make, Model, Cylinder, Doors, Cruise, Sound, ...</td>\n",
              "      <td>9.536546e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>507</th>\n",
              "      <td>[Type, Cylinder, Doors, Cruise, Sound, Leather...</td>\n",
              "      <td>6.513649e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>508</th>\n",
              "      <td>[Make, Type, Cylinder, Doors, Cruise, Sound, L...</td>\n",
              "      <td>9.041800e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>509</th>\n",
              "      <td>[Model, Type, Cylinder, Doors, Cruise, Sound, ...</td>\n",
              "      <td>9.635034e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>510</th>\n",
              "      <td>[Make, Model, Type, Cylinder, Doors, Cruise, S...</td>\n",
              "      <td>9.718415e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>511 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f08bda23-0334-4a06-9ac5-9a05ebc3c4c3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f08bda23-0334-4a06-9ac5-9a05ebc3c4c3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f08bda23-0334-4a06-9ac5-9a05ebc3c4c3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df[\"R2_score\"].argmax())\n",
        "df[\"FEATURE_COMBINATION\"][df[\"R2_score\"].argmax()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gRydEuaX1mmK",
        "outputId": "5ceca8ec-19e0-4bf2-af48-3255bca47d96"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "494\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Make', 'Model', 'Type', 'Cylinder', 'Cruise', 'Sound', 'Leather', 'Mileage']"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "BppnDesn9C2a"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}